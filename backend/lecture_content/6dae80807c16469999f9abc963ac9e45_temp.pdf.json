{
  "deck_title": "CMSC202 Â· Polymorphism",
  "topics": [
    {
      "summary_text": "Inheritance allows derived classes to use, replace/override, or extend base class functions. Polymorphism uses virtual functions for late binding, associating multiple meanings with a single function name."
    },
    {
      "summary_text": "Virtual functions allow derived classes to override base class functions. Pure virtual functions ( = 0) require derived classes to provide an implementation, making the parent class abstract (cannot create objects of this type)."
    },
    {
      "summary_text": "When a function is `void Drive()`, the Vehicle class and Car class can implement the function. A vehicle and car object can be created, but the Vehicle's drive is always called. When a function is `virtual void Drive()`, the Car::Drive is called. A Pure virtual function `virtual void Drive() = 0` is not implementable, making the Vehicle class abstract."
    },
    {
      "summary_text": "Virtual function tables (vtables) are used for polymorphism. Each class with virtual functions (and its derived classes) gets a vtable, containing pointers to the virtual functions. A hidden variable (__vptr) points to the class's vtable, enabling dynamic dispatch."
    },
    {
      "summary_text": "Classes with virtual functions should declare a virtual destructor. Non-virtual destructors will only invoke the base class's destructor, potentially leading to memory leaks. Virtual constructors are not possible because object construction requires complete type information."
    }
  ]
}
