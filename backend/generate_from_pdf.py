import os # dotenv() and os for our API_KEYS
import json # to parse the pdf files as json, (later out in the flashcards)
import fitz # to help grap the text from the pdfs (pymupdf)
from dotenv import load_dotenv
import google.generativeai as genai # import gemini library for generation
# load env
load_dotenv()
API_KEY = os.getenv('GEMINI_API_KEY')
# configure gemini w API key so we can get access
genai.configure(api_key=API_KEY)
MODEL = 'gemini-2.0-flash' # chosen model for speed + efficiency
# set up genai with the key
genai.configure(api_key = API_KEY)

# seed model
my_model = genai.GenerativeModel(MODEL)


'''
The json file generated by gemini has ```json in the beggining and ``` at the end
so when we try to load it as json file, doesnt work cuz of improper format

This fxn strips the front and back of what gemini generates to make it json
file ready
'''
def stripText(s):
    s = s.strip()
    # read line by line and strip any line that starts with ```
    if s.startswith("```"):
        # format properly with the \n bc it comes like string of words unformatted
        first_newline = s.find("\n")
        s = s[first_newline+1:].lstrip() if first_newline != -1 else ""
        # lstrip strips everything from the left side of the character
    if s.endswith("```"):
        last_fence = s.rfind("```")
        if s[last_fence:].strip() == "```":
            s = s[:last_fence].rstrip()
            # lstrip strips everything from the left side of character character
    return s

'''
pdf_path is the path to the pdf file -> ex. upload_files/202.pdf
'''
def generate_from_pdf(pdf_path):
    # --- Extract full text from PDF ---
    new_pdf_name = pdf_path.split("/")[-1]
    doc = fitz.open(pdf_path)
    full_text = "\n".join([page.get_text("text") for page in doc])

    # --- PART A: Summarize slides into JSON ---
    prompt_a = f"""
    You are an educational summarizer.
    Read the lecture slides text below and produce a JSON file in this exact format:

    {{
      "deck_title": "Course · Topic",
      "topics": [
        {{
          "summary_text": "≤ 800 chars, student-friendly explanation of the concept."
        }}
      ]
    }}

    Rules:
    - Do not include markdown fences (```).
    - Do not add commentary outside the JSON.
    - "deck_title" should be the course name or main topic of the slides.
    - Each "summary_text" should summarize one concept or slide, concise and clear.

    Here is the lecture text:
    {full_text}
    """
    
    response_a = my_model.generate_content(prompt_a)
    clean_a = stripText(response_a.text)
    decoded_a = clean_a.encode("utf-8").decode("unicode_escape")

    # Save summarized slides JSON
    summary_json_path = f"lecture_content/{new_pdf_name}.json"
    with open(summary_json_path, "w", encoding="utf-8") as f:
        for line in decoded_a.splitlines():
            f.write(line.rstrip() + "\n")

    # Load the JSON for quiz generation
    data = json.loads(decoded_a)

    # --- PART B: Generate quizzes ---
    prompt_b = f"""
    You are an educational quiz generator.
    Generate practice quizzes in STRICT JSON format like this make them short questions lecture style <= 8 words MCQ and FRQ:

    {{
      "deck_title": "Course · Topic",
      "qa_pairs": [
        {{
          "practice_question": "One clear question testing this topic.",
          "answer": "Correct answer, ≤ 2 sentences."
        }}
      ]
    }}

    Here is the lecture JSON to base the quiz on:
    {json.dumps(data, indent=2)}
    """
    response_b = my_model.generate_content(prompt_b)
    clean_b = stripText(response_b.text)
    decoded_b = clean_b.encode("utf-8").decode("unicode_escape")

    # Save quizzes JSON
    quiz_json_path = f"q_a/{new_pdf_name}.json"
    with open(quiz_json_path, "w", encoding="utf-8") as f:
        for line in decoded_b.splitlines():
            f.write(line.rstrip() + "\n")

    # Return the quiz JSON as a Python dict to Flask
    quiz_deck = json.loads(decoded_b)
    return quiz_deck, summary_json_path, quiz_json_path
