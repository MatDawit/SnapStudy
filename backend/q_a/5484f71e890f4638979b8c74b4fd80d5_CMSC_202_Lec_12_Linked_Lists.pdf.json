{
  "deck_title": "CMSC202 Â· Linked Lists",
  "qa_pairs": [
    {
      "practice_question": "What is a linked list?",
      "answer": "A dynamic data structure of nodes, each containing data and a pointer to the next node."
    },
    {
      "practice_question": "Why are linked list insertions/deletions easier than vectors'?",
      "answer": "Linked lists only require contiguous storage for each node."
    },
    {
      "practice_question": "What does the last node's pointer point to?",
      "answer": "The last node's pointer points to `nullptr`."
    },
    {
      "practice_question": "What is a memory leak in linked lists?",
      "answer": "Losing a node, detaching part of the list."
    },
    {
      "practice_question": "Why use dummy nodes in linked lists?",
      "answer": "Dummy nodes simplify operations by eliminating edge cases."
    },
    {
      "practice_question": "Name three essential linked list functions.",
      "answer": "Constructor, insert(), remove(), printList(), and isEmpty()."
    },
    {
      "practice_question": "How is a linked list initialized?",
      "answer": "The head pointer (m_head) is initialized to `nullptr`."
    },
    {
      "practice_question": "How to insert a node at the beginning?",
      "answer": "Create a new node, set its `m_next` to the current head, and update the head to point to the new node."
    },
     {
      "practice_question": "What pointers are needed to reverse a linked list?",
      "answer": "Current, previous, and next are needed to avoid losing the list."
    }
  ]
}
